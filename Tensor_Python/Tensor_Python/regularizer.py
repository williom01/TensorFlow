#coding:utf-8
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

BATCH_SIZE=30
seed=2
#????seed??????????
rdm=np.random.RandomState(seed)
#??????????300??2?еľ??󣬱?ʾ300???????㣨x0,x1????Ϊ???????ݼ?
X=rdm.randn(300,2)
#??????300??2?еľ?????ȡ??һ?У??ж?????????????????ƽ????С??2???͸?Y??ֵ1?????ำֵ0????Ϊ???????ݼ??ı?ǩ
Y_=[int(x0*x0+x1*x1<2) for (x0,x1) in X]
#????Y?е?ÿ??Ԫ?أ?1??ֵ??Red?????ำֵ??Blue??,?????ɿ??ӻ???ʾʱ?˿???ֱ??????
Y_c=[['red' if y else 'blue'] for y in Y_]
#?????ݼ?X?ͱ?ǩY????shape????????һ??Ԫ??Ϊ-1?????ڶ????????????õ?
#?ڶ???Ԫ?ر?ʾ?????У???X????Ϊn??2?У???Y????Ϊn??1??
X=np.vstack(X).reshape(-1,2)
Y_=np.vstack(Y_).reshape(-1,1)
print(X)
print(Y_)
print(Y_c)
#??plt.scatter???????ݼ?X?????е?0??Ԫ?غ͵?һ??Ԫ?صĵ㼴???еģ?x0,x1??
#?ø???Y_c??Ӧ??ֵ??ʾ??ɫ
plt.scatter(X[:,0],X[:,1],c=np.squeeze(Y_c))
plt.show()
#?????????????????롢??????????????????ǰ????????
def get_weight(shape,regularizer):
    w=tf.Variable(tf.random_normal(shape),dtype=tf.float32)
    tf.add_to_collection('losses',tf.contrib.layers.l2_regularizer(regularizer)(w))
    return w
def get_bias(shape):
    b=tf.Variable(tf.constant(0.01,shape=shape))
    return b
x=tf.placeholder(tf.float32,shape=(None,2))
y_=tf.placeholder(tf.float32,shape=(None,1))
w1=get_weight([2,11],0.01)
b1=get_bias([11])
y1=tf.nn.relu(tf.matmul(x,w1)+b1)
w2=get_weight([11,1],0.01)
b2=get_bias([1])
y=tf.matmul(y1,w2)+b2
#??????ʧ????
loss_mse=tf.reduce_mean(tf.square(y-y_))
loss_total=loss_mse+tf.add_n(tf.get_collection('losses'))
#???巴?򴫲?????????????????
train_step=tf.train.AdamOptimizer(0.0001).minimize(loss_mse)
with tf.Session() as sess:
    init_op=tf.global_variables_initializer()
    sess.run(init_op)
    STEPS=40000
    for i in range(STEPS):
        start=(i*BATCH_SIZE)%300
        end=start+BATCH_SIZE
        sess.run(train_step,feed_dict={x:X[start:end],y_:Y_[start:end]})
        if i%2000==0:
            loss_mse_v=sess.run(loss_mse,feed_dict={x:X,y_:Y_})
            print("After %d steps,loss is :%f " %(i,loss_mse_v))
            #xx??-3??3֮???Բ???Ϊ0.01??yy??-3??3֮???Բ???0.01?????ɶ?ά??????????
            xx,yy=np.mgrid[-3:3:0.01,-3:3:0.01]
            #??yy,xx??ֱ?????ϲ???һ??2?еľ????õ?һ?????????????ļ???
            grid=np.c_[xx.ravel(),yy.ravel()]
            #????????????ι?????????磬probsΪ????
            probs=sess.run(y,feed_dict={x:grid})
            #??probs??shape??????xx??????
            probs=probs.reshape(xx.shape)
            print("w1:\n",sess.run(w1))
            print("b1:\n",sess.run(b1))
            print("w2:\n",sess.run(w2))
            print("b2:\n",sess.run(b2))
plt.scatter(X[:,0],X[:,1],c=np.squeeze(Y_c))
plt.contour(xx,yy,probs,levels=[0.5])
plt.show()